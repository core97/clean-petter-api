generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Breed {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String         @unique
  createdAt DateTime       @default(now())
  images    FileStoraged[]
  petAds    PetAd[]        @relation(fields: [petAdsId], references: [id])
  petAdsId  String[]       @db.ObjectId
  petType   PetType
}

model PetAd {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  address   Address
  breeds    Breed[]        @relation(fields: [breedIds], references: [id])
  breedIds  String[]       @db.ObjectId
  createdAt DateTime       @default(now())
  dateBirth DateTime
  images    FileStoraged[]
  name      String
  user      User           @relation(fields: [userId], references: [id])
  userId    String         @db.ObjectId
  requests  PetAdRequest[]
}

model PetAdRequest {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @db.ObjectId
  petAd     PetAd         @relation(fields: [petAdId], references: [id])
  petAdId   String        @db.ObjectId
  status    RequestStatus @default(PENDING)
  visits    Visit[]
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime       @default(now())
  email        String         @unique
  name         String
  petAds       PetAd[]
  password     String
  addresses    Address[]
  preadoption  Preadoption?
  visits       Visit[]
  petAdRequest PetAdRequest[]
  role         Role           @default(USER)
}

model Visit {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime     @default(now())
  user            User         @relation(fields: [userId], references: [id])
  address         Address
  userId          String       @db.ObjectId
  status          VisitStatus  @default(PENDING)
  date            DateTime
  userIdToConfirm String       @db.ObjectId
  petAdRequest    PetAdRequest @relation(fields: [petAdRequestId], references: [id])
  petAdRequestId  String       @db.ObjectId
  type            VisitType
}

type Address {
  city         String
  country      CountryIso
  placeId      String
  displayName  String
  geoJSON      GeoJSON
  postalCode   Int
  url          String?
  streetNumber String?
}

type FileStoraged {
  publicId String
  url      String
}

type GeoJSON {
  type        String @default("Point")
  coordinates Int[]
}

type Preadoption {
  formId     String
  responseId String
}

enum CountryIso {
  ES
}

enum PetType {
  CAT
  DOG
}

enum RequestStatus {
  ACCEPTED
  PENDING
  REJECTED
}

enum Role {
  ADMIN
  USER
}

enum VisitStatus {
  PENDING
  CONFIRMED
}

enum VisitType {
  VISIT_NEXT_HOME
  VISIT_PET
}
